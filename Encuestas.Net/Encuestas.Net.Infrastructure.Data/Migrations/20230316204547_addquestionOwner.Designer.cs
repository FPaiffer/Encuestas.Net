// <auto-generated />
using System;
using Encuestas.Net.Infrastructure.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Encuestas.Net.Infrastructure.Data.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20230316204547_addquestionOwner")]
    partial class addquestionOwner
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Encuestas.Net.Domain.Entities.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("QuestionGoTo")
                        .HasColumnType("int");

                    b.Property<int>("QuestionOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionOwnerId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("Encuestas.Net.Domain.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsMultiple")
                        .HasColumnType("bit");

                    b.Property<int?>("QuestionFatherId")
                        .HasColumnType("int");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionFatherId");

                    b.HasIndex("SectionId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("Encuestas.Net.Domain.Entities.Respondent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Respondent");
                });

            modelBuilder.Entity("Encuestas.Net.Domain.Entities.RespondentResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RespondentReferenceId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("SurveyReferenceId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("QuestionReferenceId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("AnswerReferenceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id", "RespondentReferenceId", "SurveyReferenceId", "QuestionReferenceId");

                    b.HasIndex("RespondentReferenceId");

                    b.HasIndex("SurveyReferenceId");

                    b.ToTable("RespondentResponse");
                });

            modelBuilder.Entity("Encuestas.Net.Domain.Entities.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("SurveyId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("Encuestas.Net.Domain.Entities.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Survey");
                });

            modelBuilder.Entity("Encuestas.Net.Domain.Entities.Answer", b =>
                {
                    b.HasOne("Encuestas.Net.Domain.Entities.Question", "QuestionOwner")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionOwner");
                });

            modelBuilder.Entity("Encuestas.Net.Domain.Entities.Question", b =>
                {
                    b.HasOne("Encuestas.Net.Domain.Entities.Question", "QuestionFather")
                        .WithMany()
                        .HasForeignKey("QuestionFatherId");

                    b.HasOne("Encuestas.Net.Domain.Entities.Section", null)
                        .WithMany("Questions")
                        .HasForeignKey("SectionId");

                    b.Navigation("QuestionFather");
                });

            modelBuilder.Entity("Encuestas.Net.Domain.Entities.RespondentResponse", b =>
                {
                    b.HasOne("Encuestas.Net.Domain.Entities.Respondent", "RespondentReference")
                        .WithMany()
                        .HasForeignKey("RespondentReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Encuestas.Net.Domain.Entities.Survey", "SurveyReference")
                        .WithMany()
                        .HasForeignKey("SurveyReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RespondentReference");

                    b.Navigation("SurveyReference");
                });

            modelBuilder.Entity("Encuestas.Net.Domain.Entities.Section", b =>
                {
                    b.HasOne("Encuestas.Net.Domain.Entities.Survey", null)
                        .WithMany("Sections")
                        .HasForeignKey("SurveyId");
                });

            modelBuilder.Entity("Encuestas.Net.Domain.Entities.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Encuestas.Net.Domain.Entities.Section", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Encuestas.Net.Domain.Entities.Survey", b =>
                {
                    b.Navigation("Sections");
                });
#pragma warning restore 612, 618
        }
    }
}
